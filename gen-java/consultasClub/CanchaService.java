/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package consultasClub;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-18")
public class CanchaService {

  public interface Iface {

    public Cancha traerCanchaPorId(int idcancha) throws org.apache.thrift.TException;

    public java.util.List<Cancha> traerCanchasPorDeporte(java.lang.String deporte) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void traerCanchaPorId(int idcancha, org.apache.thrift.async.AsyncMethodCallback<Cancha> resultHandler) throws org.apache.thrift.TException;

    public void traerCanchasPorDeporte(java.lang.String deporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Cancha traerCanchaPorId(int idcancha) throws org.apache.thrift.TException
    {
      send_traerCanchaPorId(idcancha);
      return recv_traerCanchaPorId();
    }

    public void send_traerCanchaPorId(int idcancha) throws org.apache.thrift.TException
    {
      traerCanchaPorId_args args = new traerCanchaPorId_args();
      args.setIdcancha(idcancha);
      sendBase("traerCanchaPorId", args);
    }

    public Cancha recv_traerCanchaPorId() throws org.apache.thrift.TException
    {
      traerCanchaPorId_result result = new traerCanchaPorId_result();
      receiveBase(result, "traerCanchaPorId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "traerCanchaPorId failed: unknown result");
    }

    public java.util.List<Cancha> traerCanchasPorDeporte(java.lang.String deporte) throws org.apache.thrift.TException
    {
      send_traerCanchasPorDeporte(deporte);
      return recv_traerCanchasPorDeporte();
    }

    public void send_traerCanchasPorDeporte(java.lang.String deporte) throws org.apache.thrift.TException
    {
      traerCanchasPorDeporte_args args = new traerCanchasPorDeporte_args();
      args.setDeporte(deporte);
      sendBase("traerCanchasPorDeporte", args);
    }

    public java.util.List<Cancha> recv_traerCanchasPorDeporte() throws org.apache.thrift.TException
    {
      traerCanchasPorDeporte_result result = new traerCanchasPorDeporte_result();
      receiveBase(result, "traerCanchasPorDeporte");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "traerCanchasPorDeporte failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void traerCanchaPorId(int idcancha, org.apache.thrift.async.AsyncMethodCallback<Cancha> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      traerCanchaPorId_call method_call = new traerCanchaPorId_call(idcancha, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traerCanchaPorId_call extends org.apache.thrift.async.TAsyncMethodCall<Cancha> {
      private int idcancha;
      public traerCanchaPorId_call(int idcancha, org.apache.thrift.async.AsyncMethodCallback<Cancha> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idcancha = idcancha;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("traerCanchaPorId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        traerCanchaPorId_args args = new traerCanchaPorId_args();
        args.setIdcancha(idcancha);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cancha getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_traerCanchaPorId();
      }
    }

    public void traerCanchasPorDeporte(java.lang.String deporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      traerCanchasPorDeporte_call method_call = new traerCanchasPorDeporte_call(deporte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class traerCanchasPorDeporte_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Cancha>> {
      private java.lang.String deporte;
      public traerCanchasPorDeporte_call(java.lang.String deporte, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deporte = deporte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("traerCanchasPorDeporte", org.apache.thrift.protocol.TMessageType.CALL, 0));
        traerCanchasPorDeporte_args args = new traerCanchasPorDeporte_args();
        args.setDeporte(deporte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Cancha> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_traerCanchasPorDeporte();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("traerCanchaPorId", new traerCanchaPorId());
      processMap.put("traerCanchasPorDeporte", new traerCanchasPorDeporte());
      return processMap;
    }

    public static class traerCanchaPorId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, traerCanchaPorId_args> {
      public traerCanchaPorId() {
        super("traerCanchaPorId");
      }

      public traerCanchaPorId_args getEmptyArgsInstance() {
        return new traerCanchaPorId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public traerCanchaPorId_result getResult(I iface, traerCanchaPorId_args args) throws org.apache.thrift.TException {
        traerCanchaPorId_result result = new traerCanchaPorId_result();
        result.success = iface.traerCanchaPorId(args.idcancha);
        return result;
      }
    }

    public static class traerCanchasPorDeporte<I extends Iface> extends org.apache.thrift.ProcessFunction<I, traerCanchasPorDeporte_args> {
      public traerCanchasPorDeporte() {
        super("traerCanchasPorDeporte");
      }

      public traerCanchasPorDeporte_args getEmptyArgsInstance() {
        return new traerCanchasPorDeporte_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public traerCanchasPorDeporte_result getResult(I iface, traerCanchasPorDeporte_args args) throws org.apache.thrift.TException {
        traerCanchasPorDeporte_result result = new traerCanchasPorDeporte_result();
        result.success = iface.traerCanchasPorDeporte(args.deporte);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("traerCanchaPorId", new traerCanchaPorId());
      processMap.put("traerCanchasPorDeporte", new traerCanchasPorDeporte());
      return processMap;
    }

    public static class traerCanchaPorId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, traerCanchaPorId_args, Cancha> {
      public traerCanchaPorId() {
        super("traerCanchaPorId");
      }

      public traerCanchaPorId_args getEmptyArgsInstance() {
        return new traerCanchaPorId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Cancha> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Cancha>() { 
          public void onComplete(Cancha o) {
            traerCanchaPorId_result result = new traerCanchaPorId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            traerCanchaPorId_result result = new traerCanchaPorId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, traerCanchaPorId_args args, org.apache.thrift.async.AsyncMethodCallback<Cancha> resultHandler) throws org.apache.thrift.TException {
        iface.traerCanchaPorId(args.idcancha,resultHandler);
      }
    }

    public static class traerCanchasPorDeporte<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, traerCanchasPorDeporte_args, java.util.List<Cancha>> {
      public traerCanchasPorDeporte() {
        super("traerCanchasPorDeporte");
      }

      public traerCanchasPorDeporte_args getEmptyArgsInstance() {
        return new traerCanchasPorDeporte_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>>() { 
          public void onComplete(java.util.List<Cancha> o) {
            traerCanchasPorDeporte_result result = new traerCanchasPorDeporte_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            traerCanchasPorDeporte_result result = new traerCanchasPorDeporte_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, traerCanchasPorDeporte_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Cancha>> resultHandler) throws org.apache.thrift.TException {
        iface.traerCanchasPorDeporte(args.deporte,resultHandler);
      }
    }

  }

  public static class traerCanchaPorId_args implements org.apache.thrift.TBase<traerCanchaPorId_args, traerCanchaPorId_args._Fields>, java.io.Serializable, Cloneable, Comparable<traerCanchaPorId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("traerCanchaPorId_args");

    private static final org.apache.thrift.protocol.TField IDCANCHA_FIELD_DESC = new org.apache.thrift.protocol.TField("idcancha", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traerCanchaPorId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traerCanchaPorId_argsTupleSchemeFactory();

    public int idcancha; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDCANCHA((short)1, "idcancha");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDCANCHA
            return IDCANCHA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDCANCHA_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDCANCHA, new org.apache.thrift.meta_data.FieldMetaData("idcancha", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(traerCanchaPorId_args.class, metaDataMap);
    }

    public traerCanchaPorId_args() {
    }

    public traerCanchaPorId_args(
      int idcancha)
    {
      this();
      this.idcancha = idcancha;
      setIdcanchaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traerCanchaPorId_args(traerCanchaPorId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idcancha = other.idcancha;
    }

    public traerCanchaPorId_args deepCopy() {
      return new traerCanchaPorId_args(this);
    }

    @Override
    public void clear() {
      setIdcanchaIsSet(false);
      this.idcancha = 0;
    }

    public int getIdcancha() {
      return this.idcancha;
    }

    public traerCanchaPorId_args setIdcancha(int idcancha) {
      this.idcancha = idcancha;
      setIdcanchaIsSet(true);
      return this;
    }

    public void unsetIdcancha() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDCANCHA_ISSET_ID);
    }

    /** Returns true if field idcancha is set (has been assigned a value) and false otherwise */
    public boolean isSetIdcancha() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDCANCHA_ISSET_ID);
    }

    public void setIdcanchaIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDCANCHA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IDCANCHA:
        if (value == null) {
          unsetIdcancha();
        } else {
          setIdcancha((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IDCANCHA:
        return getIdcancha();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IDCANCHA:
        return isSetIdcancha();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof traerCanchaPorId_args)
        return this.equals((traerCanchaPorId_args)that);
      return false;
    }

    public boolean equals(traerCanchaPorId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_idcancha = true;
      boolean that_present_idcancha = true;
      if (this_present_idcancha || that_present_idcancha) {
        if (!(this_present_idcancha && that_present_idcancha))
          return false;
        if (this.idcancha != that.idcancha)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + idcancha;

      return hashCode;
    }

    @Override
    public int compareTo(traerCanchaPorId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIdcancha()).compareTo(other.isSetIdcancha());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdcancha()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idcancha, other.idcancha);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("traerCanchaPorId_args(");
      boolean first = true;

      sb.append("idcancha:");
      sb.append(this.idcancha);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traerCanchaPorId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchaPorId_argsStandardScheme getScheme() {
        return new traerCanchaPorId_argsStandardScheme();
      }
    }

    private static class traerCanchaPorId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<traerCanchaPorId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, traerCanchaPorId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDCANCHA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idcancha = iprot.readI32();
                struct.setIdcanchaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, traerCanchaPorId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IDCANCHA_FIELD_DESC);
        oprot.writeI32(struct.idcancha);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traerCanchaPorId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchaPorId_argsTupleScheme getScheme() {
        return new traerCanchaPorId_argsTupleScheme();
      }
    }

    private static class traerCanchaPorId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<traerCanchaPorId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, traerCanchaPorId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIdcancha()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdcancha()) {
          oprot.writeI32(struct.idcancha);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, traerCanchaPorId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idcancha = iprot.readI32();
          struct.setIdcanchaIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class traerCanchaPorId_result implements org.apache.thrift.TBase<traerCanchaPorId_result, traerCanchaPorId_result._Fields>, java.io.Serializable, Cloneable, Comparable<traerCanchaPorId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("traerCanchaPorId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traerCanchaPorId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traerCanchaPorId_resultTupleSchemeFactory();

    public Cancha success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cancha.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(traerCanchaPorId_result.class, metaDataMap);
    }

    public traerCanchaPorId_result() {
    }

    public traerCanchaPorId_result(
      Cancha success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traerCanchaPorId_result(traerCanchaPorId_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cancha(other.success);
      }
    }

    public traerCanchaPorId_result deepCopy() {
      return new traerCanchaPorId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Cancha getSuccess() {
      return this.success;
    }

    public traerCanchaPorId_result setSuccess(Cancha success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cancha)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof traerCanchaPorId_result)
        return this.equals((traerCanchaPorId_result)that);
      return false;
    }

    public boolean equals(traerCanchaPorId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(traerCanchaPorId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("traerCanchaPorId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traerCanchaPorId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchaPorId_resultStandardScheme getScheme() {
        return new traerCanchaPorId_resultStandardScheme();
      }
    }

    private static class traerCanchaPorId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<traerCanchaPorId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, traerCanchaPorId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cancha();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, traerCanchaPorId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traerCanchaPorId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchaPorId_resultTupleScheme getScheme() {
        return new traerCanchaPorId_resultTupleScheme();
      }
    }

    private static class traerCanchaPorId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<traerCanchaPorId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, traerCanchaPorId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, traerCanchaPorId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Cancha();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class traerCanchasPorDeporte_args implements org.apache.thrift.TBase<traerCanchasPorDeporte_args, traerCanchasPorDeporte_args._Fields>, java.io.Serializable, Cloneable, Comparable<traerCanchasPorDeporte_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("traerCanchasPorDeporte_args");

    private static final org.apache.thrift.protocol.TField DEPORTE_FIELD_DESC = new org.apache.thrift.protocol.TField("deporte", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traerCanchasPorDeporte_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traerCanchasPorDeporte_argsTupleSchemeFactory();

    public java.lang.String deporte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPORTE((short)4, "deporte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 4: // DEPORTE
            return DEPORTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPORTE, new org.apache.thrift.meta_data.FieldMetaData("deporte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(traerCanchasPorDeporte_args.class, metaDataMap);
    }

    public traerCanchasPorDeporte_args() {
    }

    public traerCanchasPorDeporte_args(
      java.lang.String deporte)
    {
      this();
      this.deporte = deporte;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traerCanchasPorDeporte_args(traerCanchasPorDeporte_args other) {
      if (other.isSetDeporte()) {
        this.deporte = other.deporte;
      }
    }

    public traerCanchasPorDeporte_args deepCopy() {
      return new traerCanchasPorDeporte_args(this);
    }

    @Override
    public void clear() {
      this.deporte = null;
    }

    public java.lang.String getDeporte() {
      return this.deporte;
    }

    public traerCanchasPorDeporte_args setDeporte(java.lang.String deporte) {
      this.deporte = deporte;
      return this;
    }

    public void unsetDeporte() {
      this.deporte = null;
    }

    /** Returns true if field deporte is set (has been assigned a value) and false otherwise */
    public boolean isSetDeporte() {
      return this.deporte != null;
    }

    public void setDeporteIsSet(boolean value) {
      if (!value) {
        this.deporte = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEPORTE:
        if (value == null) {
          unsetDeporte();
        } else {
          setDeporte((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPORTE:
        return getDeporte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEPORTE:
        return isSetDeporte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof traerCanchasPorDeporte_args)
        return this.equals((traerCanchasPorDeporte_args)that);
      return false;
    }

    public boolean equals(traerCanchasPorDeporte_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deporte = true && this.isSetDeporte();
      boolean that_present_deporte = true && that.isSetDeporte();
      if (this_present_deporte || that_present_deporte) {
        if (!(this_present_deporte && that_present_deporte))
          return false;
        if (!this.deporte.equals(that.deporte))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeporte()) ? 131071 : 524287);
      if (isSetDeporte())
        hashCode = hashCode * 8191 + deporte.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(traerCanchasPorDeporte_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeporte()).compareTo(other.isSetDeporte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeporte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deporte, other.deporte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("traerCanchasPorDeporte_args(");
      boolean first = true;

      sb.append("deporte:");
      if (this.deporte == null) {
        sb.append("null");
      } else {
        sb.append(this.deporte);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traerCanchasPorDeporte_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchasPorDeporte_argsStandardScheme getScheme() {
        return new traerCanchasPorDeporte_argsStandardScheme();
      }
    }

    private static class traerCanchasPorDeporte_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<traerCanchasPorDeporte_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, traerCanchasPorDeporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 4: // DEPORTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deporte = iprot.readString();
                struct.setDeporteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, traerCanchasPorDeporte_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deporte != null) {
          oprot.writeFieldBegin(DEPORTE_FIELD_DESC);
          oprot.writeString(struct.deporte);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traerCanchasPorDeporte_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchasPorDeporte_argsTupleScheme getScheme() {
        return new traerCanchasPorDeporte_argsTupleScheme();
      }
    }

    private static class traerCanchasPorDeporte_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<traerCanchasPorDeporte_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, traerCanchasPorDeporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeporte()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeporte()) {
          oprot.writeString(struct.deporte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, traerCanchasPorDeporte_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deporte = iprot.readString();
          struct.setDeporteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class traerCanchasPorDeporte_result implements org.apache.thrift.TBase<traerCanchasPorDeporte_result, traerCanchasPorDeporte_result._Fields>, java.io.Serializable, Cloneable, Comparable<traerCanchasPorDeporte_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("traerCanchasPorDeporte_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new traerCanchasPorDeporte_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new traerCanchasPorDeporte_resultTupleSchemeFactory();

    public java.util.List<Cancha> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cancha.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(traerCanchasPorDeporte_result.class, metaDataMap);
    }

    public traerCanchasPorDeporte_result() {
    }

    public traerCanchasPorDeporte_result(
      java.util.List<Cancha> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public traerCanchasPorDeporte_result(traerCanchasPorDeporte_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Cancha> __this__success = new java.util.ArrayList<Cancha>(other.success.size());
        for (Cancha other_element : other.success) {
          __this__success.add(new Cancha(other_element));
        }
        this.success = __this__success;
      }
    }

    public traerCanchasPorDeporte_result deepCopy() {
      return new traerCanchasPorDeporte_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cancha> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cancha elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Cancha>();
      }
      this.success.add(elem);
    }

    public java.util.List<Cancha> getSuccess() {
      return this.success;
    }

    public traerCanchasPorDeporte_result setSuccess(java.util.List<Cancha> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Cancha>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof traerCanchasPorDeporte_result)
        return this.equals((traerCanchasPorDeporte_result)that);
      return false;
    }

    public boolean equals(traerCanchasPorDeporte_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(traerCanchasPorDeporte_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("traerCanchasPorDeporte_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class traerCanchasPorDeporte_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchasPorDeporte_resultStandardScheme getScheme() {
        return new traerCanchasPorDeporte_resultStandardScheme();
      }
    }

    private static class traerCanchasPorDeporte_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<traerCanchasPorDeporte_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, traerCanchasPorDeporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Cancha>(_list0.size);
                  Cancha _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Cancha();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, traerCanchasPorDeporte_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Cancha _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class traerCanchasPorDeporte_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public traerCanchasPorDeporte_resultTupleScheme getScheme() {
        return new traerCanchasPorDeporte_resultTupleScheme();
      }
    }

    private static class traerCanchasPorDeporte_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<traerCanchasPorDeporte_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, traerCanchasPorDeporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Cancha _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, traerCanchasPorDeporte_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Cancha>(_list5.size);
            Cancha _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Cancha();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
