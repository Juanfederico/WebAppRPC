<?php
namespace consultasClub;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Filial {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idfilial',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'localidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'horario_apertura',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'horario_cierre',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'diames_mantenimiento',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    );

  /**
   * @var int
   */
  public $idfilial = null;
  /**
   * @var string
   */
  public $localidad = null;
  /**
   * @var string
   */
  public $horario_apertura = null;
  /**
   * @var string
   */
  public $horario_cierre = null;
  /**
   * @var int
   */
  public $diames_mantenimiento = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idfilial'])) {
        $this->idfilial = $vals['idfilial'];
      }
      if (isset($vals['localidad'])) {
        $this->localidad = $vals['localidad'];
      }
      if (isset($vals['horario_apertura'])) {
        $this->horario_apertura = $vals['horario_apertura'];
      }
      if (isset($vals['horario_cierre'])) {
        $this->horario_cierre = $vals['horario_cierre'];
      }
      if (isset($vals['diames_mantenimiento'])) {
        $this->diames_mantenimiento = $vals['diames_mantenimiento'];
      }
    }
  }

  public function getName() {
    return 'Filial';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idfilial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->horario_apertura);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->horario_cierre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->diames_mantenimiento);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Filial');
    if ($this->idfilial !== null) {
      $xfer += $output->writeFieldBegin('idfilial', TType::I32, 1);
      $xfer += $output->writeI32($this->idfilial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localidad !== null) {
      $xfer += $output->writeFieldBegin('localidad', TType::STRING, 2);
      $xfer += $output->writeString($this->localidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->horario_apertura !== null) {
      $xfer += $output->writeFieldBegin('horario_apertura', TType::STRING, 3);
      $xfer += $output->writeString($this->horario_apertura);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->horario_cierre !== null) {
      $xfer += $output->writeFieldBegin('horario_cierre', TType::STRING, 4);
      $xfer += $output->writeString($this->horario_cierre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->diames_mantenimiento !== null) {
      $xfer += $output->writeFieldBegin('diames_mantenimiento', TType::I32, 5);
      $xfer += $output->writeI32($this->diames_mantenimiento);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserSocio {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'user',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $user = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
    }
  }

  public function getName() {
    return 'UserSocio';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserSocio');
    if ($this->user !== null) {
      $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
      $xfer += $output->writeString($this->user);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


